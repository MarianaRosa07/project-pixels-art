{
  "stats": {
    "suites": 10,
    "tests": 41,
    "passes": 22,
    "pending": 0,
    "failures": 19,
    "start": "2023-10-03T17:50:31.619Z",
    "end": "2023-10-03T17:53:38.099Z",
    "duration": 186480,
    "testsRegistered": 41,
    "passPercent": 53.65853658536586,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a251f9a2-f579-48c2-9d66-9f56d2919a21",
      "title": "",
      "fullFile": "cypress/e2e/project.cy.js",
      "file": "cypress/e2e/project.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
          "title": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifica se contém um elemento `h1` com o id `title` com o título correto",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas Verifica se contém um elemento `h1` com o id `title` com o título correto",
              "timedOut": null,
              "duration": 177,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('h1#title').should('contain.text', 'Paleta de Cores');",
              "err": {},
              "uuid": "ee9e1366-c1b2-42bd-931a-e27e6d1961b7",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A paleta de cores deve ser um elemento com `id` denominado `color-palette` e ter mais de 0px de altura e de largura.",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas A paleta de cores deve ser um elemento com `id` denominado `color-palette` e ter mais de 0px de altura e de largura.",
              "timedOut": null,
              "duration": 71,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#color-palette').should('be.visible');\ncy.get('#color-palette').children('.color');",
              "err": {},
              "uuid": "c9dbbf33-ddb8-4ca5-bcbc-56be3675770d",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se cada cor individual da paleta de cores possui a `classe` chamada `color`.",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas Verifica se cada cor individual da paleta de cores possui a `classe` chamada `color`.",
              "timedOut": null,
              "duration": 103,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').should('have.length', 4).then(colors => {\n  for (let i = 0; i < colors.length; i++) {\n    cy.wrap(colors[i]).should('be.visible');\n  }\n});",
              "err": {},
              "uuid": "3d0da9db-e87b-4b28-8aa6-72e24a67ba3f",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a cor de fundo de cada elemento da paleta é a cor que o elemento representa. **A única cor não permitida na paleta é a cor branca.**",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas Verifica se a cor de fundo de cada elemento da paleta é a cor que o elemento representa. **A única cor não permitida na paleta é a cor branca.**",
              "timedOut": null,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').each(color => {\n  cy.wrap(color).should('have.class', 'color').and('not.have.css', 'background-color', WHITE);\n  cy.wrap(color).should('have.css', 'background-color');\n});",
              "err": {},
              "uuid": "449feb6f-82f6-49fb-8473-d47748291df3",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se cada elemento da paleta de cores tem uma borda preta, sólida e com 1 pixel de largura;",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas Verifica se cada elemento da paleta de cores tem uma borda preta, sólida e com 1 pixel de largura;",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').each(color => {\n  expect(getBorderSize(color[0])).to.be.closeTo(1, 0.5);\n  cy.wrap(color).and('have.css', 'border-color', BLACK).and('have.class', 'color');\n});",
              "err": {},
              "uuid": "19436f4c-5f9f-4b6a-b271-4fb522cc7026",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a paleta lista todas as cores disponíveis para utilização, lado a lado.",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas Verifica se a paleta lista todas as cores disponíveis para utilização, lado a lado.",
              "timedOut": null,
              "duration": 63,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').then(colors => {\n  for (let index = 1; index < colors.length; index += 1) {\n    const currentColor = colors[index];\n    const previousColor = colors[index - 1];\n    cy.wrap(currentColor).should('be.onTheRightOf', previousColor).and('be.horizontallyAlignedWith', previousColor);\n  }\n});",
              "err": {},
              "uuid": "35d17359-0098-45a8-8021-80f555029087",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a paleta de cores está posicionada abaixo do título 'Paleta de Cores'",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas Verifica se a paleta de cores está posicionada abaixo do título 'Paleta de Cores'",
              "timedOut": null,
              "duration": 61,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('h1#title').then(title => {\n  cy.get('#color-palette').should('be.belowOf', title);\n});",
              "err": {},
              "uuid": "99344517-22d1-4102-951b-feef5a8a44b6",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a paleta de cores não contém cores repetidas.",
              "fullTitle": "1 - Adicione à página o título \"Paleta de Cores\" e uma paleta contendo quatro cores distintas Verifica se a paleta de cores não contém cores repetidas.",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').then(colors => {\n  const allColors = Array.from(colors).map(color => Cypress.$(color).css('background-color'));\n  cy.log(allColors);\n  const uniqColors = [...new Set(allColors)];\n  cy.log(uniqColors);\n  expect(allColors.length).to.eq(uniqColors.length);\n});",
              "err": {},
              "uuid": "8a8b7665-4652-4f4a-9164-2fd0ec3dc1db",
              "parentUUID": "f14e9916-4b42-4da2-ad44-7919668f5d5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee9e1366-c1b2-42bd-931a-e27e6d1961b7",
            "c9dbbf33-ddb8-4ca5-bcbc-56be3675770d",
            "3d0da9db-e87b-4b28-8aa6-72e24a67ba3f",
            "449feb6f-82f6-49fb-8473-d47748291df3",
            "19436f4c-5f9f-4b6a-b271-4fb522cc7026",
            "35d17359-0098-45a8-8021-80f555029087",
            "99344517-22d1-4102-951b-feef5a8a44b6",
            "8a8b7665-4652-4f4a-9164-2fd0ec3dc1db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 676,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "64412359-426c-4cb3-a025-7518d60de4a5",
          "title": "2 - Adicione à página um quadro contendo 25 pixels, sendo que cada elemento do quadro de pixels possua 40 pixels de largura, 40 pixels de altura e seja delimitado por uma borda preta de 1 pixel",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifica se o quadro de pixels possui o `id` denominado `pixel-board`",
              "fullTitle": "2 - Adicione à página um quadro contendo 25 pixels, sendo que cada elemento do quadro de pixels possua 40 pixels de largura, 40 pixels de altura e seja delimitado por uma borda preta de 1 pixel Verifica se o quadro de pixels possui o `id` denominado `pixel-board`",
              "timedOut": null,
              "duration": 57,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#pixel-board').should('be.visible');",
              "err": {},
              "uuid": "8fc3664e-6023-46e7-9fd1-d05dc4952924",
              "parentUUID": "64412359-426c-4cb3-a025-7518d60de4a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se cada pixel individual dentro do quadro possui a `classe` denominada `pixel`.",
              "fullTitle": "2 - Adicione à página um quadro contendo 25 pixels, sendo que cada elemento do quadro de pixels possua 40 pixels de largura, 40 pixels de altura e seja delimitado por uma borda preta de 1 pixel Verifica se cada pixel individual dentro do quadro possui a `classe` denominada `pixel`.",
              "timedOut": null,
              "duration": 69,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.pixel').should('have.length', 25);",
              "err": {},
              "uuid": "fda1d2e2-cc4a-4d98-a340-8cd6181ecd74",
              "parentUUID": "64412359-426c-4cb3-a025-7518d60de4a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a cor inicial dos pixels dentro do quadro, ao abrir a página, é branca.",
              "fullTitle": "2 - Adicione à página um quadro contendo 25 pixels, sendo que cada elemento do quadro de pixels possua 40 pixels de largura, 40 pixels de altura e seja delimitado por uma borda preta de 1 pixel Verifica se a cor inicial dos pixels dentro do quadro, ao abrir a página, é branca.",
              "timedOut": null,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.pixel').should('have.length', 25).each(pixel => {\n  expect(pixel).to.have.css('background-color', WHITE);\n});",
              "err": {},
              "uuid": "68173de5-d17c-420a-b4c2-ceefe7432954",
              "parentUUID": "64412359-426c-4cb3-a025-7518d60de4a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o quadro de pixels aparece abaixo da paleta de cores",
              "fullTitle": "2 - Adicione à página um quadro contendo 25 pixels, sendo que cada elemento do quadro de pixels possua 40 pixels de largura, 40 pixels de altura e seja delimitado por uma borda preta de 1 pixel Verifica se o quadro de pixels aparece abaixo da paleta de cores",
              "timedOut": null,
              "duration": 57,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#color-palette').then(palette => {\n  cy.get('#pixel-board').should('be.belowOf', palette);\n});",
              "err": {},
              "uuid": "badfaa4f-6244-4870-a63f-19bd5bbcdeb1",
              "parentUUID": "64412359-426c-4cb3-a025-7518d60de4a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o quadro de pixels tem altura e comprimento de 5 elementos",
              "fullTitle": "2 - Adicione à página um quadro contendo 25 pixels, sendo que cada elemento do quadro de pixels possua 40 pixels de largura, 40 pixels de altura e seja delimitado por uma borda preta de 1 pixel Verifica se o quadro de pixels tem altura e comprimento de 5 elementos",
              "timedOut": null,
              "duration": 151,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.pixel').should('have.length', 25).each(pixel => {\n  expect(pixel).to.have.css('background-color', WHITE);\n}).then(pixels => {\n  const rows = chunk(pixels, 5);\n  rows.forEach(row => {\n    for (let index = 1; index < row.length; index += 1) {\n      const current = pixels[index];\n      const previous = pixels[index - 1];\n      cy.wrap(current).should('be.onTheRightOf', previous).and('be.horizontallyAlignedWith', previous);\n    }\n  });\n  for (let index = 1; index < 5; index += 1) {\n    expect(pixels[index * 5]).to.be.belowOf(pixels[(index - 1) * 5]);\n  }\n});",
              "err": {},
              "uuid": "94a4bd3d-61b8-4054-ae24-a774e3d98c33",
              "parentUUID": "64412359-426c-4cb3-a025-7518d60de4a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se 40 pixels é o tamanho total do elemento, incluindo seu conteúdo e excluindo a borda preta, que deve ser criada à parte.",
              "fullTitle": "2 - Adicione à página um quadro contendo 25 pixels, sendo que cada elemento do quadro de pixels possua 40 pixels de largura, 40 pixels de altura e seja delimitado por uma borda preta de 1 pixel Verifica se 40 pixels é o tamanho total do elemento, incluindo seu conteúdo e excluindo a borda preta, que deve ser criada à parte.",
              "timedOut": null,
              "duration": 180,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.pixel').each(pixel => {\n  expect(getBorderSize(pixel[0])).to.be.closeTo(1, 0.5);\n  expect(getWidth(pixel[0])).to.be.closeTo(40, 0.5);\n  expect(getHeight(pixel[0])).to.be.closeTo(40, 0.5);\n  cy.wrap(pixel).and('have.css', 'border-color', BLACK);\n});",
              "err": {},
              "uuid": "f9b18c9a-96d1-42cb-875d-2b79b4ff997b",
              "parentUUID": "64412359-426c-4cb3-a025-7518d60de4a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fc3664e-6023-46e7-9fd1-d05dc4952924",
            "fda1d2e2-cc4a-4d98-a340-8cd6181ecd74",
            "68173de5-d17c-420a-b4c2-ceefe7432954",
            "badfaa4f-6244-4870-a63f-19bd5bbcdeb1",
            "94a4bd3d-61b8-4054-ae24-a774e3d98c33",
            "f9b18c9a-96d1-42cb-875d-2b79b4ff997b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 600,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3891f40a-13b9-4058-909c-778651170194",
          "title": "3 - Crie uma função para selecionar uma cor na paleta de cores",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifica se somente uma cor da paleta de cores tem a classe `selected` de cada vez",
              "fullTitle": "3 - Crie uma função para selecionar uma cor na paleta de cores Verifica se somente uma cor da paleta de cores tem a classe `selected` de cada vez",
              "timedOut": null,
              "duration": 245,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').each((selectedColor, selectedColorIndex) => {\n  cy.wrap(selectedColor).click();\n  cy.get('.color').each((color, colorIndex) => {\n    if (colorIndex === selectedColorIndex) {\n      expect(color).to.have.class('selected');\n    } else {\n      expect(color).not.to.have.class('selected');\n    }\n  });\n});",
              "err": {
                "message": "AssertionError: expected '<div#preto.color.selected>' not to have class 'selected'",
                "estack": "AssertionError: expected '<div#preto.color.selected>' not to have class 'selected'\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:184:42)",
                "diff": null
              },
              "uuid": "7bb316b5-3839-496a-a066-1e424ae21581",
              "parentUUID": "3891f40a-13b9-4058-909c-778651170194",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se os pixels dentro do quadro não têm a classe `selected` quando são clicados",
              "fullTitle": "3 - Crie uma função para selecionar uma cor na paleta de cores Verifica se os pixels dentro do quadro não têm a classe `selected` quando são clicados",
              "timedOut": null,
              "duration": 8739,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').each(color => {\n  const backgroundColor = color.css('background-color');\n  cy.wrap(color).click();\n  cy.get('.pixel').each(pixel => {\n    cy.wrap(pixel).click().should('not.have.class', 'selected');\n  });\n});",
              "err": {},
              "uuid": "d23acfa6-8bd4-449c-b30d-22a79cc8b19b",
              "parentUUID": "3891f40a-13b9-4058-909c-778651170194",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d23acfa6-8bd4-449c-b30d-22a79cc8b19b"
          ],
          "failures": [
            "7bb316b5-3839-496a-a066-1e424ae21581"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8984,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "647837ee-8157-48ce-9351-8735e46137cd",
          "title": "4 - Crie uma função que permita preencher um pixel do quadro com a cor selecionada na paleta de cores",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifica se após selecionar uma cor na paleta, é possível pintar os pixels com essa cor",
              "fullTitle": "4 - Crie uma função que permita preencher um pixel do quadro com a cor selecionada na paleta de cores Verifica se após selecionar uma cor na paleta, é possível pintar os pixels com essa cor",
              "timedOut": null,
              "duration": 9005,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').each(color => {\n  const backgroundColor = color.css('background-color');\n  cy.wrap(color).click();\n  cy.get('.pixel').each(pixel => {\n    cy.wrap(pixel).click().should('have.css', 'background-color', backgroundColor);\n  });\n});",
              "err": {},
              "uuid": "bc3b6996-c36f-4fca-9a59-08b4f0405c02",
              "parentUUID": "647837ee-8157-48ce-9351-8735e46137cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se somente o pixel que foi clicado foi preenchido com a cor selecionada, sem influenciar na cor dos demais pixels.",
              "fullTitle": "4 - Crie uma função que permita preencher um pixel do quadro com a cor selecionada na paleta de cores Verifica se somente o pixel que foi clicado foi preenchido com a cor selecionada, sem influenciar na cor dos demais pixels.",
              "timedOut": null,
              "duration": 964,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const colorToPixelIndexMap = {\n  0: 6,\n  1: 8,\n  2: 16,\n  3: 18\n};\ncy.get('.color').each((color, index) => {\n  cy.wrap(color).click();\n  const backgroundColor = color.css('background-color');\n  const clickedPixelIndex = colorToPixelIndexMap[index];\n  cy.get('.pixel').eq(clickedPixelIndex).click();\n  cy.get('.pixel').eq(clickedPixelIndex - 1).should('not.have.css', 'background-color', backgroundColor);\n  cy.get('.pixel').eq(clickedPixelIndex + 1).should('not.have.css', 'background-color', backgroundColor);\n  cy.get('.pixel').eq(clickedPixelIndex - 5).should('not.have.css', 'background-color', backgroundColor);\n  cy.get('.pixel').eq(clickedPixelIndex + 5).should('not.have.css', 'background-color', backgroundColor);\n  cy.get('.pixel').eq(clickedPixelIndex - 6).should('not.have.css', 'background-color', backgroundColor);\n  cy.get('.pixel').eq(clickedPixelIndex - 4).should('not.have.css', 'background-color', backgroundColor);\n  cy.get('.pixel').eq(clickedPixelIndex + 4).should('not.have.css', 'background-color', backgroundColor);\n  cy.get('.pixel').eq(clickedPixelIndex + 6).should('not.have.css', 'background-color', backgroundColor);\n});",
              "err": {},
              "uuid": "1d7ab921-81d3-4af7-bce0-6d4da2b02e2c",
              "parentUUID": "647837ee-8157-48ce-9351-8735e46137cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc3b6996-c36f-4fca-9a59-08b4f0405c02",
            "1d7ab921-81d3-4af7-bce0-6d4da2b02e2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9969,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eb3c86ea-37ac-4ff1-8d59-96e08952cac0",
          "title": "5 - Crie um botão que, ao ser clicado, limpa o quadro preenchendo a cor de todos seus pixels com branco",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifica se o botão tem o `id` denominado `clear-board`",
              "fullTitle": "5 - Crie um botão que, ao ser clicado, limpa o quadro preenchendo a cor de todos seus pixels com branco Verifica se o botão tem o `id` denominado `clear-board`",
              "timedOut": null,
              "duration": 57,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#clear-board').should('be.visible');",
              "err": {},
              "uuid": "8dfa3019-f335-45e0-ae0a-c297155b2688",
              "parentUUID": "eb3c86ea-37ac-4ff1-8d59-96e08952cac0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o botão está posicionado entre a paleta de cores e o quadro de pixels",
              "fullTitle": "5 - Crie um botão que, ao ser clicado, limpa o quadro preenchendo a cor de todos seus pixels com branco Verifica se o botão está posicionado entre a paleta de cores e o quadro de pixels",
              "timedOut": null,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#color-palette').then(palette => {\n  cy.get('#clear-board').should('be.belowOf', palette);\n});\ncy.get('#clear-board').then(clearBtn => {\n  cy.get('#pixel-board').should('be.belowOf', clearBtn);\n});",
              "err": {},
              "uuid": "877d322f-5e18-4626-84cf-21c46121c332",
              "parentUUID": "eb3c86ea-37ac-4ff1-8d59-96e08952cac0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o texto do botão é 'Limpar'",
              "fullTitle": "5 - Crie um botão que, ao ser clicado, limpa o quadro preenchendo a cor de todos seus pixels com branco Verifica se o texto do botão é 'Limpar'",
              "timedOut": null,
              "duration": 64,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#clear-board').should('contain.text', 'Limpar');",
              "err": {},
              "uuid": "484f899b-bdf5-4653-b3d4-5c5972c81064",
              "parentUUID": "eb3c86ea-37ac-4ff1-8d59-96e08952cac0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se ao clicar no botão, o quadro de pixels é totalmente preenchido de branco",
              "fullTitle": "5 - Crie um botão que, ao ser clicado, limpa o quadro preenchendo a cor de todos seus pixels com branco Verifica se ao clicar no botão, o quadro de pixels é totalmente preenchido de branco",
              "timedOut": null,
              "duration": 12354,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').eq(1).then(color => {\n  const backgroundColor = color.css('background-color');\n  cy.wrap(color).click();\n  cy.get('.pixel').each(pixel => {\n    cy.wrap(pixel).click().should('have.css', 'background-color', backgroundColor);\n  });\n});\ncy.get('#clear-board').click();\ncy.get('.pixel').each(pixel => {\n  cy.wrap(pixel).should('have.css', 'background-color', WHITE);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected '<div#vermelho.pixel>' to have CSS property 'background-color' with the value 'rgb(255, 255, 255)', but the value was 'rgb(255, 0, 0)'",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected '<div#vermelho.pixel>' to have CSS property 'background-color' with the value 'rgb(255, 255, 255)', but the value was 'rgb(255, 0, 0)'\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:294:21)",
                "diff": "- 'rgb(255, 0, 0)'\n+ 'rgb(255, 255, 255)'\n"
              },
              "uuid": "48d79b5e-c22c-49ca-9cb9-e9c3fa8180b1",
              "parentUUID": "eb3c86ea-37ac-4ff1-8d59-96e08952cac0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8dfa3019-f335-45e0-ae0a-c297155b2688",
            "877d322f-5e18-4626-84cf-21c46121c332",
            "484f899b-bdf5-4653-b3d4-5c5972c81064"
          ],
          "failures": [
            "48d79b5e-c22c-49ca-9cb9-e9c3fa8180b1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12571,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bc232465-d5f6-4996-9a0e-cad41a6be663",
          "title": "6 - Adicione um botão para gerar cores aleatórias para a paleta de cores",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "O botão deve possuir o `id` denominado `button-random-color`",
              "fullTitle": "6 - Adicione um botão para gerar cores aleatórias para a paleta de cores O botão deve possuir o `id` denominado `button-random-color`",
              "timedOut": null,
              "duration": 71,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#button-random-color').should('be.visible');",
              "err": {},
              "uuid": "597e3cc2-3814-4bdd-afb8-84d91485ed24",
              "parentUUID": "bc232465-d5f6-4996-9a0e-cad41a6be663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "O botão deve possuir o texto `Cores aleatórias`",
              "fullTitle": "6 - Adicione um botão para gerar cores aleatórias para a paleta de cores O botão deve possuir o texto `Cores aleatórias`",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('#button-random-color').contains('Cores aleatórias');",
              "err": {},
              "uuid": "2f332c22-48f1-43e0-b982-c07bc4f27820",
              "parentUUID": "bc232465-d5f6-4996-9a0e-cad41a6be663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "As cores geradas na paleta são diferentes a cada click do botão.",
              "fullTitle": "6 - Adicione um botão para gerar cores aleatórias para a paleta de cores As cores geradas na paleta são diferentes a cada click do botão.",
              "timedOut": null,
              "duration": 139,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').then(colors => {\n  let currentColors;\n  let previousColors = Array.from(colors).map(color => Cypress.$(color).css('background-color'));\n  for (let i = 0; i < 5; i += 1) {\n    cy.get('#button-random-color').click();\n    cy.get('.color').then(colors => {\n      currentColors = Array.from(colors).map(color => Cypress.$(color).css('background-color'));\n      expect(currentColors).not.to.deep.equal(previousColors);\n      previousColors = currentColors;\n    });\n  }\n});",
              "err": {
                "message": "AssertionError: expected [ Array(4) ] to not deeply equal [ Array(4) ]",
                "estack": "AssertionError: expected [ Array(4) ] to not deeply equal [ Array(4) ]\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:327:44)",
                "diff": ""
              },
              "uuid": "2f6a4e9e-712f-4457-9cf3-3abbe73f8c59",
              "parentUUID": "bc232465-d5f6-4996-9a0e-cad41a6be663",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "597e3cc2-3814-4bdd-afb8-84d91485ed24",
            "2f332c22-48f1-43e0-b982-c07bc4f27820"
          ],
          "failures": [
            "2f6a4e9e-712f-4457-9cf3-3abbe73f8c59"
          ],
          "pending": [],
          "skipped": [],
          "duration": 269,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7bfd89b1-bbff-40c4-ad3b-799ebf2b0cf7",
          "title": "7 - Crie uma função para salvar e recuperar o seu desenho atual no localStorage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Os pixels pintados devem ser salvos no localStorage com a chave `pixelBoard`",
              "fullTitle": "7 - Crie uma função para salvar e recuperar o seu desenho atual no localStorage Os pixels pintados devem ser salvos no localStorage com a chave `pixelBoard`",
              "timedOut": null,
              "duration": 245,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.color:first').click().then(() => {\n  cy.get('.pixel:first').click().then(() => {\n    const pixelboard = localStorage.getItem('pixelBoard');\n    expect(pixelboard).to.not.equal(null);\n  });\n});",
              "err": {
                "message": "AssertionError: expected null to not equal null",
                "estack": "AssertionError: expected null to not equal null\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:344:34)",
                "diff": ""
              },
              "uuid": "b128f735-a93b-4647-b770-98b9fd536c99",
              "parentUUID": "7bfd89b1-bbff-40c4-ad3b-799ebf2b0cf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "O quadro deve ser preenchido com as mesmas cores utilizadas anteriormente, nas posições corretas ao recarregar a página",
              "fullTitle": "7 - Crie uma função para salvar e recuperar o seu desenho atual no localStorage O quadro deve ser preenchido com as mesmas cores utilizadas anteriormente, nas posições corretas ao recarregar a página",
              "timedOut": null,
              "duration": 10985,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.color').each((color, index) => {\n  if (index === 2) {\n    cy.wrap(color).click();\n    const backgroundColor = color.css('background-color');\n    const clickedPixelsIndex = [2, 7, 10, 11, 12, 13, 14, 17, 22];\n    cy.get('.pixel').each((pixel, index) => {\n      clickedPixelsIndex.forEach(pixelIndex => {\n        if (index === pixelIndex) cy.wrap(pixel).click();\n      });\n    });\n    cy.reload();\n    cy.get('.pixel').each((pixel, index) => {\n      clickedPixelsIndex.forEach(pixelIndex => {\n        if (index === pixelIndex) cy.wrap(pixel).should('have.css', 'background-color', backgroundColor);\n      });\n    });\n  }\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected '<div.pixel>' to have CSS property 'background-color' with the value 'rgb(0, 0, 255)', but the value was 'rgb(255, 255, 255)'",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected '<div.pixel>' to have CSS property 'background-color' with the value 'rgb(0, 0, 255)', but the value was 'rgb(255, 255, 255)'\n    at eval (webpack:///./cypress/e2e/project.cy.js:365:29)\nat Array.forEach (<anonymous>)\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:363:29)",
                "diff": "- 'rgb(255, 255, 255)'\n+ 'rgb(0, 0, 255)'\n"
              },
              "uuid": "25aa91db-f522-43da-9298-6cd68bff45cf",
              "parentUUID": "7bfd89b1-bbff-40c4-ad3b-799ebf2b0cf7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b128f735-a93b-4647-b770-98b9fd536c99",
            "25aa91db-f522-43da-9298-6cd68bff45cf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11230,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
          "title": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifica se existe um input com o id `board-size`",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se existe um input com o id `board-size`",
              "timedOut": null,
              "duration": 10078,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').should('be.visible');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:379:26)",
                "diff": null
              },
              "uuid": "da3b79b2-3668-42a4-8a03-53b80cb6130b",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se existe um botão com o id `generate-board`",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se existe um botão com o id `generate-board`",
              "timedOut": null,
              "duration": 10128,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#generate-board').should('be.visible');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#generate-board`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#generate-board`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:383:30)",
                "diff": null
              },
              "uuid": "b9cf1022-59b5-4292-8b41-3a1a31ecd435",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o input só aceita número maiores que zero. Essa restrição deve ser feita usando os atributos do elemento `input`",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se o input só aceita número maiores que zero. Essa restrição deve ser feita usando os atributos do elemento `input`",
              "timedOut": null,
              "duration": 10091,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size[type=\\'number\\'][min=\\'1\\']');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size[type='number'][min='1']`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size[type='number'][min='1']`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:387:7)",
                "diff": null
              },
              "uuid": "7c169ef6-b214-4d5a-a2a4-2432462d6317",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o botão contém o texto 'VQV'",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se o botão contém o texto 'VQV'",
              "timedOut": null,
              "duration": 10094,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#generate-board').contains(/vqv/i);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#generate-board`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#generate-board`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:391:7)",
                "diff": null
              },
              "uuid": "5f18e99b-a2cf-4c3d-8c7a-7c78dde6734f",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o input está posicionado entre a paleta de cores e o quadro de pixels",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se o input está posicionado entre a paleta de cores e o quadro de pixels",
              "timedOut": null,
              "duration": 10102,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#color-palette').then(palette => {\n  cy.get('#board-size').should('be.belowOf', palette);\n});\ncy.get('#board-size').then(palette => {\n  cy.get('#pixel-board').should('be.belowOf', palette);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:396:28)",
                "diff": null
              },
              "uuid": "8a8372b5-5a8b-46b5-862e-ed1bce2ee4fa",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "O input e o botão com o texto \"VQV\" devem ter o mesmo `parent-node`",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels O input e o botão com o texto \"VQV\" devem ter o mesmo `parent-node`",
              "timedOut": null,
              "duration": 10098,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').siblings('#generate-board');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:405:7)",
                "diff": null
              },
              "uuid": "3a6370a7-2d5f-4010-b8b9-e656e4b7fb75",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se nenhum valor for colocado no input ao clicar no botão, um `alert` é exibido com o texto: 'Board inválido!'",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se nenhum valor for colocado no input ao clicar no botão, um `alert` é exibido com o texto: 'Board inválido!'",
              "timedOut": null,
              "duration": 10097,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let alerted = false;\ncy.on('window:alert', msg => alerted = msg);\ncy.get('#generate-board').click().then(() => expect(alerted).to.match(/Board inválido!/i));",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#generate-board`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#generate-board`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:412:7)",
                "diff": null
              },
              "uuid": "bb21b48d-d828-4d61-9162-6183089dcbf9",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se ao clicar no botão com um valor preenchido, o tamanho do board muda.",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se ao clicar no botão com um valor preenchido, o tamanho do board muda.",
              "timedOut": null,
              "duration": 10196,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').clear().type(10);\ncy.get('#generate-board').click();\ncy.get('.pixel').should('have.length', 100);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:418:7)",
                "diff": null
              },
              "uuid": "7c1cb5bc-5e1d-4a0a-8ada-c0105fc77de0",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se o novo quadro tem todos os pixels preenchidos com a cor branca",
              "fullTitle": "8 - Crie um input que permita à pessoa usuária preencher um novo tamanho para o quadro de pixels Verifica se o novo quadro tem todos os pixels preenchidos com a cor branca",
              "timedOut": null,
              "duration": 10108,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').clear().type(6);\ncy.get('#generate-board').click();\ncy.get('.pixel').should('have.length', 36).each(pixel => {\n  expect(pixel).to.have.css('background-color', WHITE);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:424:7)",
                "diff": null
              },
              "uuid": "ec9bd750-4dc7-41d0-a452-b901158ff561",
              "parentUUID": "e94e5a53-8408-4aff-a996-f015e79fa2cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "da3b79b2-3668-42a4-8a03-53b80cb6130b",
            "b9cf1022-59b5-4292-8b41-3a1a31ecd435",
            "7c169ef6-b214-4d5a-a2a4-2432462d6317",
            "5f18e99b-a2cf-4c3d-8c7a-7c78dde6734f",
            "8a8372b5-5a8b-46b5-862e-ed1bce2ee4fa",
            "3a6370a7-2d5f-4010-b8b9-e656e4b7fb75",
            "bb21b48d-d828-4d61-9162-6183089dcbf9",
            "7c1cb5bc-5e1d-4a0a-8ada-c0105fc77de0",
            "ec9bd750-4dc7-41d0-a452-b901158ff561"
          ],
          "pending": [],
          "skipped": [],
          "duration": 90992,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "49d4270b-7032-4fd9-a352-96c7eeafe3c4",
          "title": "9 - Crie uma função que limite o tamanho mínimo e máximo do quadro de pixels",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifica se a altura máxima do board é 50",
              "fullTitle": "9 - Crie uma função que limite o tamanho mínimo e máximo do quadro de pixels Verifica se a altura máxima do board é 50",
              "timedOut": null,
              "duration": 10137,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').clear().type(50);\ncy.get('#generate-board').click();\ncy.get('.pixel').should('have.length', 2500);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:440:7)",
                "diff": null
              },
              "uuid": "be90cc85-6c8e-44be-97fe-26c80537b6b4",
              "parentUUID": "49d4270b-7032-4fd9-a352-96c7eeafe3c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a altura do board é 5 quando um valor menor é colocado no input",
              "fullTitle": "9 - Crie uma função que limite o tamanho mínimo e máximo do quadro de pixels Verifica se a altura do board é 5 quando um valor menor é colocado no input",
              "timedOut": null,
              "duration": 10089,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').clear().type(4);\ncy.get('#generate-board').click();\ncy.get('.pixel').should('have.length', 25);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:446:7)",
                "diff": null
              },
              "uuid": "829fd94e-7d0f-459f-9e93-3c879f896ebc",
              "parentUUID": "49d4270b-7032-4fd9-a352-96c7eeafe3c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a altura do board é 50 quando um valor maior é colocado no input",
              "fullTitle": "9 - Crie uma função que limite o tamanho mínimo e máximo do quadro de pixels Verifica se a altura do board é 50 quando um valor maior é colocado no input",
              "timedOut": null,
              "duration": 10132,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').clear().type(51);\ncy.get('#generate-board').click();\ncy.get('.pixel').should('have.length', 2500);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:452:7)",
                "diff": null
              },
              "uuid": "8eabc81e-0b20-4aab-bfb9-1aed2db4a586",
              "parentUUID": "49d4270b-7032-4fd9-a352-96c7eeafe3c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "be90cc85-6c8e-44be-97fe-26c80537b6b4",
            "829fd94e-7d0f-459f-9e93-3c879f896ebc",
            "8eabc81e-0b20-4aab-bfb9-1aed2db4a586"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30358,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c2e3f83c-dd4e-474b-952d-3c0fe28a2653",
          "title": "10 - Crie uma função para manter o tamanho novo do board ao recarregar a página",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "O tamanho do board gerado deve ser salvo no localStorage com a chave `boardSize`",
              "fullTitle": "10 - Crie uma função para manter o tamanho novo do board ao recarregar a página O tamanho do board gerado deve ser salvo no localStorage com a chave `boardSize`",
              "timedOut": null,
              "duration": 10106,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').clear().type(6);\ncy.get('#generate-board').click();\ncy.reload().then(() => {\n  const boardSize = JSON.parse(localStorage.getItem('boardSize'));\n  expect(boardSize).to.not.equal(null);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:464:7)",
                "diff": null
              },
              "uuid": "334266ec-21a7-46d5-89fe-6187dc928c0c",
              "parentUUID": "c2e3f83c-dd4e-474b-952d-3c0fe28a2653",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "O quadro deve ter o mesmo tamanho gerado ao recarregar a página.",
              "fullTitle": "10 - Crie uma função para manter o tamanho novo do board ao recarregar a página O quadro deve ter o mesmo tamanho gerado ao recarregar a página.",
              "timedOut": null,
              "duration": 10098,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('#board-size').clear().type(6);\ncy.get('#generate-board').click();\ncy.reload();\ncy.get('.pixel').should('have.length', 36);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `#board-size`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/project.cy.js:473:7)",
                "diff": null
              },
              "uuid": "db74cefb-3510-483a-bde1-d7d5e6bb26fe",
              "parentUUID": "c2e3f83c-dd4e-474b-952d-3c0fe28a2653",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "334266ec-21a7-46d5-89fe-6187dc928c0c",
            "db74cefb-3510-483a-bde1-d7d5e6bb26fe"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": true,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}